{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Bold;\f2\froman\fcharset0 Times-Roman;
\f3\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red42\green49\blue64;\red245\green245\blue246;
\red0\green0\blue0;\red255\green255\blue255;\red77\green0\blue58;\red38\green38\blue38;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c21569\c25490\c31765;\cssrgb\c96863\c96863\c97255;
\csgray\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c38039\c4314\c29412;\cssrgb\c20000\c20000\c20000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh14960\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
CORE JAVA REVISION:\
\

\f1\b \expnd0\expndtw0\kerning0
Q1.What is the difference between Compiler and Interpreter?\

\f2\b0 A) 
\f1\b COMPILER:
\f2\b0  It means java source code which High level language(HLL) \outl0\strokewidth0 \strokec2 as input \outl0\strokewidth0 and generates into Machine level language(MLL).\
     * It will scan High level language (HLL) code as only once.\
   \
     
\f1\b INTERPRETER:
\f2\b0 It means java source code which high level language(HLL) and generates into Machine level language(MLL).\
     * It will scan High level language(HLL) as multiple times.\
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf0 \outl0\strokewidth0 \strokec2 Q2.What is the difference between JDK, JRE, and JVM?\

\f2\b0 A)
\f1\b  JDK: 
\f2\b0 The term JDK means Java development kit, which means software having tools, libraries which developers to develop applications.\
     
\f1\b  JRE: 
\f2\b0 The term JRE means java runtime environment,Which helps execution java program having java virtual machine, class libraries and other components.\
    
\f1\b  JVM:
\f2\b0 The term JVM means Java virtual machine, which understand the byte codes and also provide runtime for java programs.\

\f1\b \
Q3.How many types of memory areas are allocated by JVM?\

\f2\b0 A) There are Heap area, method area,JVM stacks,Native method stacks,Runtime constant pool,Direct Memory,\
\
\

\f1\b Q4.What is JIT compiler?\
A)
\f2\b0 \cf3 \cb4 \strokec3 JIT stands for Just-In-Time. In the context of programming languages and virtual machines, a JIT compiler is a component that dynamically compiles code at runtime,\
    as opposed to ahead-of-time (AOT) compilation where code is compiled before execution.\
\

\f1\b \cf0 \cb1 \strokec2 Q5.What are the various access specifiers in Java?\
A)
\f2\b0 There are public, private, protected and default.\
\

\f1\b Q6.What is a compiler in Java?\
A)
\f2\b0 Compiler complies the code, when compilation successful it generates .class files, the .class files are used by JVM during execution.\
    In other words ,the source code HLL as input and generates MLL and The HLL code scans only once.\
\

\f1\b Q7.Explain the types of variables in Java?\
A)
\f2\b0 In java, Mainly we discuss about two types of variables which are local variables and global variables.\
     Local Variables: The variables which are  written inside a method is known as local variables.\
     Global variables:The Variables which are written outside method and inside class is known as Global Variables.\
\

\f1\b Q8.What are the Datatypes in Java?\
A) Datatypes in java:\
     
\f2\b0 Byte(1 byte),short(2 bytes),integer(4 bytes),long(8 bytes),float(4 bytes),double(8 bytes),character(2 bytes),boolean(It size is machine dependent can\'92t be predicted).\
\
\pard\pardeftab720\partightenfactor0

\f1\b \cf0 Q9.What are the identifiers in java?\
A)
\f2\b0 *The identifiers in java which having name, which is for class name, method name,variable name,label name etc.,
\f1\b \
\pard\pardeftab720\partightenfactor0
\cf0     *
\f2\b0 The only characters allowed as identifiers in java.\
    *The rules for identifiers a to z, A to Z,0 to 9 ,$, _
\f1\b \

\f2\b0     * Identifiers are starts with digits.\
    * There is restriction on length of identifiers.\
    * We can\'92t use reserved words as identifiers.
\f1\b \

\f2\b0 \
\pard\pardeftab720\partightenfactor0

\f1\b \cf0 Q10.Explain the architecture of JVM\
A)
\f2\b0 \cf3 \cb5 \strokec3 The Java Virtual Machine (JVM) is a crucial component of the Java platform. It is responsible for executing Java bytecode, \
     which is the compiled form of Java source code. The architecture of the JVM consists of several key components that work together to provide a runtime environment for Java programs. 
\f1\b \cf0 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f2\b0 \cf3 \cb5 \strokec3      \
 JVM Architecture:\
 
\f1\b 1.\cb4 Class Loader:
\f2\b0  The Class Loader subsystem is responsible for loading Java classes into the JVM. It performs tasks such as \cb5 \
    \cb4 locating and loading class files from the file system or network, verifying their integrity, and preparing them for execution. The class loader also maintains class identity, ensuring that duplicate classes are not loaded.
\f3\fs32 \cf3 \cb1 \strokec3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\pard\pardeftab720\sa420\qj\partightenfactor0

\f1\b\fs24 \cf2 \cb6 \strokec7 2) Class(Method) Area:
\f2\b0 \cf8 \strokec8 Class(Method) Area stores per-class structures such as the runtime constant pool, field and method data, the code for methods.\

\f1\b \cf2 \strokec7 3) Heap:
\f2\b0 \cf8 \strokec8 It is the runtime data area in which objects are allocated.\

\f1\b \cf2 \strokec7 4) Stack\cf7 :
\f2\b0 \cf8 \strokec8 Java Stack stores frames. It holds local variables and partial results, and plays a part in method invocation and return.\
\pard\pardeftab720\sa320\qj\partightenfactor0
\cf8 Each thread has a private JVM stack, created at the same time as thread.\
A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes.\
\pard\pardeftab720\sa420\qj\partightenfactor0

\f1\b \cf2 \strokec7 5) Program Counter Register\cf7 :
\f2\b0 \cf8 \strokec8 PC (program counter) register contains the address of the Java virtual machine instruction currently being executed.\

\f1\b \cf2 \strokec7 6) Native Method Stack\cf7 :
\f2\b0 \cf8 \strokec8 It contains all the native methods used in the application.\

\f1\b \cf2 \strokec7 7) Execution Engine\cf7 :
\f2\b0 \
\cf8 \strokec8 It contains:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\qj\partightenfactor0
\ls2\ilvl0
\f1\b \cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A virtual processor
\f2\b0 \cf0 \cb1 \
\ls2\ilvl0
\f1\b \cf8 \cb6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Interpreter:
\f2\b0 \'a0Read bytecode stream then execute the instructions.\cf0 \cb1 \
\ls2\ilvl0
\f1\b \cf8 \cb6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Just-In-Time(JIT) compiler:
\f2\b0 \'a0It is used to improve the performance. JIT compiles parts of the byte code that have similar functionality at the same time, and hence reduces the amount of time needed for compilation. Here, the term "compiler" refers to a translator from the instruction set of a Java virtual machine (JVM) to the instruction set of a specific CPU.\cf0 \cb1 \
\pard\pardeftab720\sa420\qj\partightenfactor0

\f1\b \cf2 \cb6 \strokec7 8) Java Native Interface
\f2\b0 \cf7 :\cf8 \strokec8 Java Native Interface (JNI) is a framework which provides an interface to communicate with another application written in another language like C, C++, Assembly etc. Java uses JNI framework to send output to the Console or interact with OS libraries.
\f3\fs32 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs24 \cf0 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
}